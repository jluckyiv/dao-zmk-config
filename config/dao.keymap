/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            global-quick-tap;
            hold-trigger-on-release;
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            global-quick-tap;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LGUI RBKT   &kp Q            &kp W           &kp E                 &kp R            &kp T                       &kp Y                       &kp U            &kp I            &kp O           &kp P                    &mt RGUI LEFT_BRACKET
&lt 4 GRAVE     &lh_pht LCTRL A  &lh_pht LALT S  &lh_pht LEFT_SHIFT D  &lh_pht LGUI F   &lh_pht LS(LA(LC(LGUI))) G  &rh_pht RS(RA(RC(RGUI))) H  &rh_pht RGUI J   &rh_pht RSHFT K  &rh_pht RALT L  &rh_pht RCTRL SEMICOLON  &lt 4 SQT
&mt LALT MINUS  &kp Z            &kp X           &kp C                 &kp V            &kp B                       &kp N                       &kp M            &kp COMMA        &kp DOT         &kp FSLH                 &mt RALT BSLH
                                                 &lt RSE BACKSPACE     &mt LSHFT ENTER  &lt LWR ESC                 &lt LWR TAB                 &mt RSHFT SPACE  &lt RSE DEL
            >;
        };

        lower_layer {
            bindings = <
&mt LGUI PLUS    &kp EXCLAMATION   &kp AT           &kp HASH           &kp DLLR         &kp PRCNT                    &kp CARET                    &kp AMPS         &kp STAR           &kp LPAR         &kp RPAR          &mt RGUI UNDER
&mt LCTRL EQUAL  &lh_pht LCTRL N1  &lh_pht LALT N2  &lh_pht LSHIFT N3  &lh_pht LGUI N4  &lh_pht LS(LA(LC(LGUI))) N5  &rh_pht RS(RA(RC(RGUI))) N6  &rh_pht RGUI N7  &rh_pht RSHIFT N8  &rh_pht RALT N9  &rh_pht RCTRL N0  &mt RCTRL MINUS
&mt LALT F1      &kp F2            &kp F3           &kp F4             &kp F5           &kp F6                       &kp F7                       &kp F8           &kp F9             &kp F10          &kp F11           &mt RALT F12
                                                    &lt ADJ TAB        &trans           &trans                       &trans                       &trans           &lt ADJ DEL
            >;
        };

        raise_layer {
            bindings = <
&mt LGUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP  &kp SLCK         &mt RGUI CAPS
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT  &kp UP     &kp RIGHT  &kp INS          &mt RCTRL K_APP
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp END   &kp DOWN   &kp PG_DN  &kp PAUSE_BREAK  &kp RALT
                                             &trans     &trans     &lt ADJ RET   &lt ADJ ESC   &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
                        &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };
    };
};
